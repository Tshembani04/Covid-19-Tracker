{"version":3,"sources":["components/Chart/Chart.module.css","components/CountryPicker/CountryPicker.module.css","components/Cards/Cards.module.css","components/Cards/Cards.jsx","api/index.js","components/Chart/Chart.jsx","components/CountryPicker/CountryPicker.jsx","assets/image.png","App.js","index.js","App.module.css"],"names":["module","exports","Cards","data","confirmed","recovered","deaths","lastUpdate","console","log","className","styles","container","Grid","spacing","justify","item","component","Card","xs","md","card","infected","CardContent","Typography","color","gutterBottom","varient","start","end","value","duration","separator","Date","toDateString","variant","url","fetchData","country","a","changeableUrl","axios","get","fetchDailyData","modifiedData","map","dailyData","total","date","reportDate","fetchCountries","countries","name","Chart","useState","setDailyData","useEffect","initialDailyData","fetchMyAPI","barChart","labels","datasets","label","backgroundColor","options","legend","display","title","text","lineChart","toLocaleDateString","borderColor","fill","CountryPicker","handleCountryChange","fetchedCountries","setFetchedCountries","fetchAPI","FormControl","formControl","NativeSelect","defaultValue","onChange","e","target","i","App","state","fetchedData","setState","this","image","src","alt","React","Component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.60d17023.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Chart_container__3AUX1\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"font\":\"CountryPicker_font__enyng\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Cards_container__26Em6\",\"card\":\"Cards_card__25-GJ\",\"infected\":\"Cards_infected__3kbYO\",\"recovered\":\"Cards_recovered__20UOA\",\"deaths\":\"Cards_deaths__3oaYc\"};","import React from 'react'\r\nimport { Card, CardContent, Typography, Grid } from '@material-ui/core'\r\nimport CountUp from 'react-countup'\r\nimport styles from './Cards.module.css'\r\nimport LocalHospitalSharpIcon from '@material-ui/icons/LocalHospitalSharp';\r\nimport FavoriteBorderSharpIcon from '@material-ui/icons/FavoriteBorderSharp';\r\nimport SentimentVeryDissatisfiedSharpIcon from '@material-ui/icons/SentimentVeryDissatisfiedSharp';\r\n//This method of external module classnames failed me LOL\r\n// import cx from 'classnames';\r\n\r\n//destructuring \r\nconst Cards = ({ data: {confirmed, recovered, deaths, lastUpdate }})=>{\r\n    console.log(confirmed)\r\n    if(!confirmed){\r\n        return 'Loading...';\r\n    }\r\n\r\n    return(\r\n        <div className={styles.container}>\r\n            <Grid container spacing={3} justify='center'>\r\n            <Grid item component ={Card} xs={12} md={3} className= {styles.card} className={styles.infected} >\r\n                    <CardContent>\r\n                        <Typography color='textSecondary' gutterBottom > Infected </Typography>\r\n                        <Typography varient='h5'> \r\n                        <CountUp start={0} end={confirmed.value} duration={2.5} separator=','/>\r\n                         </Typography>\r\n                         <LocalHospitalSharpIcon />\r\n                        <Typography color='textSecondary'>{ new Date(lastUpdate).toDateString()} </Typography>\r\n                        <Typography variant='body2'> Number of active cases of COVID-19 </Typography>\r\n                    </CardContent>\r\n                </Grid>\r\n                <Grid item component ={Card} xs={12} md={3} className= {styles.card} className={styles.recovered} >\r\n                    <CardContent>\r\n                        <Typography color='textSecondary' gutterBottom > Recovered </Typography>\r\n                        <Typography varient='h5'> \r\n                        <CountUp start={0} end={recovered.value} duration={2.5} separator=','/>\r\n                         </Typography>\r\n                         <FavoriteBorderSharpIcon />\r\n                         <Typography color='textSecondary'>{ new Date(lastUpdate).toDateString()} </Typography>\r\n                        <Typography variant='body2'> Number of recoveries from COVID-19 </Typography>\r\n                    </CardContent>\r\n                </Grid>\r\n                <Grid item component ={Card} xs={12} md={3} className= {styles.card} className={styles.deaths} >\r\n                    <CardContent>\r\n                        <Typography color='textSecondary' gutterBottom > Deaths  </Typography>\r\n                        <Typography varient='h5'>\r\n                        <CountUp start={0} end={deaths.value} duration={2.5} separator=','/>    \r\n                        </Typography>\r\n                        <SentimentVeryDissatisfiedSharpIcon />\r\n                        <Typography color='textSecondary'>{ new Date(lastUpdate).toDateString()} </Typography>\r\n                        <Typography variant='body2'> Number of deaths caused by COVID-19 </Typography>\r\n                    </CardContent>\r\n                    \r\n                </Grid>\r\n            </Grid>\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\nexport default Cards;","//Is used to make api requests\r\nimport axios from \"axios\";\r\n\r\n// we then need the url of the api\r\nconst url = \"https://covid19.mathdro.id/api\";\r\n\r\n//create a function called fetchData that will fetch data using the modern way called async-await\r\nexport const fetchData = async (country) => {\r\n    let changeableUrl = url;\r\n    if(country){\r\n        changeableUrl = `${url}/countries/${country}`\r\n    }\r\n\r\n    try{\r\n        //Gather data\r\n        const { data: { confirmed, recovered, deaths, lastUpdate } } = await axios.get(changeableUrl);\r\n\r\n        // response.data this is the desired data that we need fron the api\r\n        \r\n        return { confirmed, recovered, deaths, lastUpdate, };\r\n    } catch(error){\r\n        console.log(error);\r\n\r\n    }\r\n}\r\n\r\nexport const fetchDailyData = async()=>{\r\n    try{\r\n        const { data } = await axios.get (` ${url}/daily`);\r\n\r\n        const modifiedData = data.map((dailyData) =>({\r\n         confirmed: dailyData.confirmed.total,\r\n         deaths: dailyData.deaths.total,\r\n         date: dailyData.reportDate,\r\n     }))   \r\n\r\n     return modifiedData;\r\n    }catch (error) {\r\n\r\n    }\r\n}\r\n\r\nexport const fetchCountries = async() => {\r\n    try{\r\n        const {data: {countries} } = await axios.get(`  ${url}/countries`)\r\n        return countries.map((country) => country.name)\r\n    }catch(error){\r\n        console.log(error);\r\n    }\r\n}","import React, { useState, useEffect } from 'react';\r\nimport { Line, Bar } from 'react-chartjs-2';\r\n\r\nimport { fetchDailyData } from '../../api';\r\n\r\nimport styles from './Chart.module.css';\r\n\r\nconst Chart = ({ data: { confirmed, recovered, deaths }, country }) => {\r\n  const [dailyData, setDailyData] = useState({});\r\n\r\n  useEffect(() => {\r\n    const fetchMyAPI = async () => {\r\n      const initialDailyData = await fetchDailyData();\r\n\r\n      setDailyData(initialDailyData);\r\n    };\r\n\r\n    fetchMyAPI();\r\n  }, []);\r\n\r\n  const barChart = (\r\n    confirmed ? (\r\n      <Bar\r\n        data={{\r\n          labels: ['Infected', 'Recovered', 'Deaths'],\r\n          datasets: [\r\n            {\r\n              label: 'People',\r\n              backgroundColor: ['rgba(0, 0, 255, 0.5)', 'rgba(0, 255, 0, 0.5)', 'rgba(255, 0, 0, 0.5)'],\r\n              data: [confirmed.value, recovered.value, deaths.value],\r\n            },\r\n          ],\r\n        }}\r\n        options={{\r\n          legend: { display: false },\r\n          title: { display: true, text: `Current state in ${country}` },\r\n        }}\r\n      />\r\n    ) : null\r\n  );\r\n\r\n  const lineChart = (\r\n    dailyData[0] ? (\r\n      <Line\r\n        data={{\r\n          labels: dailyData.map(({ date }) => new Date(date).toLocaleDateString()),\r\n          datasets: [{\r\n            data: dailyData.map((data) => data.confirmed),\r\n            label: 'Infected',\r\n            borderColor: '#3333ff',\r\n            fill: true,\r\n          }, {\r\n            data: dailyData.map((data) => data.deaths),\r\n            label: 'Deaths',\r\n            borderColor: 'red',\r\n            backgroundColor: 'rgba(255, 0, 0, 0.5)',\r\n            fill: true,\r\n          },  {\r\n            data: dailyData.map((data) => data.recovered),\r\n            label: 'Recovered',\r\n            borderColor: 'green',\r\n            backgroundColor: 'rgba(0, 255, 0, 0.5)',\r\n            fill: true,\r\n          },\r\n          ],\r\n        }}\r\n      />\r\n    ) : null\r\n  );\r\n\r\n  return (\r\n    <div className={styles.container}>\r\n      {country ? barChart : lineChart}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Chart;","import React, { useState, useEffect } from \"react\";\r\nimport { NativeSelect, FormControl } from \"@material-ui/core\";\r\nimport styles from \"./CountryPicker.module.css\";\r\nimport { fetchCountries } from \"../../api\";\r\n\r\nfunction CountryPicker({handleCountryChange}) {\r\n  const [fetchedCountries, setFetchedCountries] = useState([]);\r\n\r\n  useEffect(() => {\r\n    const fetchAPI = async () => {\r\n      setFetchedCountries(await fetchCountries());\r\n    };\r\n    fetchAPI();\r\n  }, []);\r\n\r\n  return (\r\n    <FormControl className={styles.formControl} >\r\n        <NativeSelect defaultValue='' onChange={(e) => handleCountryChange(e.target.value)}>\r\n            <option value=\"global\">Global</option>\r\n            {fetchedCountries.map((country, i) => <option key={i} value={country}>{country}</option>)} \r\n        </NativeSelect>\r\n    </FormControl>\r\n    \r\n      // <h2 className={styles.font}>Global Stats</h2>\r\n   \r\n  );\r\n}\r\n\r\nexport default CountryPicker;","export default __webpack_public_path__ + \"static/media/image.9e5d4fc7.png\";","import React from \"react\";\r\nimport { Cards, Chart, CountryPicker } from \"./components\";\r\nimport styles from \"./App.module.css\";\r\nimport { fetchData } from \"./api\";\r\nimport image from './assets/image.png'\r\n\r\nclass App extends React.Component {\r\n  state = {\r\n    //data is just an object until is populated\r\n    data: {},\r\n    country: \"\",\r\n  };\r\n\r\n  async componentDidMount() {\r\n    const fetchedData = await fetchData();\r\n\r\n    //Populate data here, we set data to populate data ie data = fetchedData .\r\n    //We can now pass data as props into our Cards component\r\n    this.setState({ data: fetchedData });\r\n  }\r\n\r\n  handleCountryChange = async (country) => {\r\n    const fetchedData = await fetchData(country);\r\n    console.log(fetchedData);\r\n    // console.log(country)\r\n\r\n    //Fetch Data\r\n    //Set the state\r\n    this.setState({ data: fetchedData, country: country });\r\n  };\r\n\r\n  render() {\r\n    //destructure data in fact take it out of this.state\r\n    const { data, country } = this.state;\r\n\r\n    return (\r\n      <div className={styles.container}>\r\n        <img className={styles.image} src={image} alt=\"COVID-19\" />\r\n        <Cards data={data} />\r\n        <CountryPicker handleCountryChange={this.handleCountryChange} />\r\n        <Chart data={data} country={country} />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App'\r\n\r\nReactDOM.render(<App/>, document.getElementById('root'));","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"App_container__1oj9V\",\"image\":\"App_image__3MLXo\"};"],"sourceRoot":""}